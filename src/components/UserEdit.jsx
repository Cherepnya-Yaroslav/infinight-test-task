import { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { updateUserAsync } from '../store/usersSlice';
import './UserEdit.css';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
const generateRandomColor = () => {
  // –í–∞—Ä–∏–∞–Ω—Ç 1: –í—ã–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
  const predefinedColors = [
    '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', 
    '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50', 
    '#8BC34A', '#CDDC39', '#FFC107', '#FF9800', '#FF5722', 
    '#795548', '#607D8B'
  ];
  
  // –í–∞—Ä–∏–∞–Ω—Ç 2: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç
  const generateRandomHexColor = () => {
    const randomColor = Math.floor(Math.random() * 16777215);
    let hexColor = randomColor.toString(16);
    while (hexColor.length < 6) {
      hexColor = '0' + hexColor;
    }
    return `#${hexColor}`;
  };
  
  // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 50% –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –∏–∑ –º–µ—Ç–æ–¥–æ–≤
  return Math.random() > 0.5 
    ? generateRandomHexColor() 
    : predefinedColors[Math.floor(Math.random() * predefinedColors.length)];
};

const UserEdit = () => {
  const dispatch = useDispatch();
  const { selectedUser, error } = useSelector(state => state.users);
  const [formData, setFormData] = useState({
    name: '',
    department: '',
    company: '',
    jobTitle: '',
    avatar: { color: '#ccc', letter: 'U' }
  });
  const [isDirty, setIsDirty] = useState(false);
  const [previewLetter, setPreviewLetter] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [updateError, setUpdateError] = useState(null);

  useEffect(() => {
    if (selectedUser) {
      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–∞
      const userAvatar = selectedUser.avatar || { color: '#ccc', letter: selectedUser.name ? selectedUser.name.charAt(0) : '?' };
      
      setFormData({
        id: selectedUser.id,
        name: selectedUser.name || '',
        department: selectedUser.department || '',
        company: selectedUser.company || '',
        jobTitle: selectedUser.jobTitle || '',
        avatar: userAvatar
      });
      
      setPreviewLetter(userAvatar.letter);
      setIsDirty(false);
      setUpdateError(null);
    }
  }, [selectedUser]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // –ï—Å–ª–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –ø–æ–ª–µ –∏–º–µ–Ω–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –±—É–∫–≤—É –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (name === 'name') {
      if (value && value.length > 0) {
        setPreviewLetter(value.charAt(0));
      } else {
        setPreviewLetter('?'); // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞
      }
    }
    
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    setIsDirty(true);
  };

  const handleChangeColor = () => {
    const newColor = generateRandomColor();
    setFormData(prev => ({
      ...prev,
      avatar: {
        ...prev.avatar,
        color: newColor
      }
    }));
    setIsDirty(true);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setUpdateError(null);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—É–∫–≤—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
    const firstLetter = formData.name && formData.name.length > 0 
      ? formData.name.charAt(0) 
      : '?';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    const updatedFormData = {
      ...formData,
      avatar: {
        ...formData.avatar,
        letter: firstLetter
      }
    };
    
    try {
      setIsSubmitting(true);
      const result = await dispatch(updateUserAsync(updatedFormData)).unwrap();
      setIsDirty(false);
    } catch (err) {
      setUpdateError(err || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!selectedUser) {
    return (
      <div className="user-edit-container empty">
        <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
      </div>
    );
  }

  return (
    <div className="user-edit-container">
      <div className="user-edit-header">
        <div className="user-edit-avatar" style={{ backgroundColor: formData.avatar.color }}>
          {previewLetter}
        </div>
        <div className="avatar-controls">
          <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h2>
          <button type="button" className="color-button" onClick={handleChangeColor} title="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç">
            <span className="color-icon">üé®</span> –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç
          </button>
        </div>
      </div>
      
      {updateError && (
        <div className="error-message">
          {updateError}
        </div>
      )}
      
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="name">–ò–º—è</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="department">–û—Ç–¥–µ–ª</label>
          <input
            type="text"
            id="department"
            name="department"
            value={formData.department}
            onChange={handleChange}
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="company">–ö–æ–º–ø–∞–Ω–∏—è</label>
          <input
            type="text"
            id="company"
            name="company"
            value={formData.company}
            onChange={handleChange}
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="jobTitle">–î–æ–ª–∂–Ω–æ—Å—Ç—å</label>
          <input
            type="text"
            id="jobTitle"
            name="jobTitle"
            value={formData.jobTitle}
            onChange={handleChange}
          />
        </div>
        
        <button 
          type="submit" 
          className="save-button"
          disabled={!isDirty || isSubmitting}
        >
          {isSubmitting ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
        </button>
      </form>
    </div>
  );
};

export default UserEdit; 